@Kopernicus
{
    @Body[Vall]
    {
        @Orbit
        {
            @referenceBody = Sun // The body that this body is orbiting around.
        }
        Atmosphere
		{
			enabled = True // Whether the body has an atmosphere.
			oxygen = True // Whether the atmosphere contains oxygen.
			staticDensityASL = 0.764571404126208 // Atmospheric density at sea level. Used to calculate the parameters of the atmosphere if no curves are used.
			adiabaticIndex = 1.39999997615814
			atmosphereDepth = 50000 // The height of the atmosphere.
			gasMassLapseRate = 4.84741125702493
			atmosphereMolarMass = 0.0289644002914429
			pressureCurveIsNormalized = False // Whether the pressure curve should use absolute (0 - atmosphereDepth) or relative (0 - 1) values.
			staticPressureASL = 60.795 // The static pressure at sea level. Used to calculate the parameters of the atmosphere if no curves are used.
			temperatureCurveIsNormalized = False // Whether the temperature curve should use absolute (0 - atmosphereDepth) or relative (0 - 1) values.
			temperatureLapseRate = 0.00564
			temperatureSeaLevel = 62 // The static temperature at sea level. Used to calculate the parameters of the atmosphere if no curves are used.
			ambientColor = 0.40,0.60,0.64,1 // All objects inside of the atmosphere will slightly shine in this color.
			lightColor = 0.40,0.60,0.64,0
			addAFG = True
			pressureCurve // Assigns a pressure value to a height value inside of the atmosphere.
			{
				key = 0 60.795 0 -0.005216384
				key = 5250 33.40898 -0.004252711 -0.004252711
				key = 10000 17.78605 -0.002407767 -0.002407767
				key = 17000 7.100577 -0.001092064 -0.001092064
				key = 22000 3.812421 -0.0004677011 -0.0004677011
				key = 31000 1.312482 -0.0001961767 -0.0001961767
				key = 38000 0.5104055 -7.855808E-05 -7.855808E-05
				key = 50000 0 0 0
			}
			temperatureCurve // Assigns a temperature value to a height value inside of the atmosphere.
			{
				key = 0 277 0 -0.009285714
				key = 5250 206 -0.009253677 0
				key = 10000 206 0 0.001419616
				key = 17000 217.8 0.001414257 0.003959919
				key = 22000 235.5 0.0039412 -0.0002581542
				key = 31000 203 -0.003911343 -0.0007623209
				key = 38000 199 0 0.001478429
				key = 50000 214 0 0
			}
			temperatureSunMultCurve
			{
				key = 0 1 0 0
				key = 5250 0.1 -6.848309E-05 -6.848309E-05
				key = 10000 0 0 0
				key = 17000 0 0 0
				key = 27000 0.1763835 4.519309E-05 4.519309E-05
				key = 38000 1 4.497274E-05 4.497274E-05
				key = 50000 1.2 0 0
			}
			temperatureLatitudeBiasCurve
			{
				key = 0 5 0 -0.04354425
				key = 50 1 -0.2132 -0.2132
				key = 70 -10 -1.128971 -1.128971
				key = 90 -30 -0.02418368 0
			}
			temperatureLatitudeSunMultCurve
			{
				key = 0 6 0 0.02746098
				key = 40 9 0.2094055 0.2094055
				key = 65 11 0 0
				key = 90 2 0 0
			}
			temperatureAxialSunBiasCurve
			{
				key = 0 0 0 0
			}
			temperatureAxialSunMultCurve
			{
				key = 0 0 0 0
			}
			temperatureEccentricityBiasCurve
			{
				key = 0 0 0 0
			}
			AtmosphereFromGround // The atmosphere effect that is seen on the horizon.
			{
				DEBUG_alwaysUpdateAll = False // Whether all parameters should get recalculated and reapplied every frame.
				doScale = True // Whether the atmosphere mesh should be scaled automatically.
				innerRadius = 499687.5 // The lower bound of the atmosphere effect.
				invWaveLength = 1.97744954,5.01561308,16.2189484,0.5
				outerRadius = 512500 // The upper bound of the atmosphere effect.
				samples = 4
				transformScale = 1.02499998,1.02499998,1.02499998 // The scale of the atmosphere mesh in all three directions. Automatically set if doScale is enabled.
				waveLength = 0.843283594,0.668219268,0.49830395,0
				outerRadiusMult = 1.025 // A multiplier that automatically sets outerRadius based on the planets radius.
				innerRadiusMult = 0.975 // A multiplier that automatically sets innerRadius based on the planets radius.
			}
		}
    }
}